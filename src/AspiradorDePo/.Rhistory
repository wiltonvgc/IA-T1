source('~/Documents/AI/T1/basicAI_Search-master/buscaDesinformada.R')
l <- [1]
l <- lis()
l <- list()
l
l <- list(a,b)
l <- list(1,2)
l
x <- c(1,2,3)
x
c[1]
x[1]
help(sapply)
l <- [1,2,3,"a"]
l <- list(1,2,3,4,"a")
l
l <- l[-list(1,5)]
x <- list(1,5)
l <- l[-x]
debugsource("AspiradorDePo.R")
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
teste.geraFilhos
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
geraFilhos.AspiradorDePo <- function(obj) {
#Um estado e representado : (M1,M2,M3,M4,P) => Mi = 1, posicao suja, Mi=0, limpa
#                                           => P = (i,j) , posicao atual do aspirador
filhosDesc <- list() #lista de filhos inclusive incompativeis
filhos <- list() # lista de filhos sem incompativeis
desc <- obj$desc #desc recebe estado a ter filhos gerados
#operadores
operadores <- list(c(-1,0,0,0,0,0), c(0,-1,0,0,0,0), c(0,0,-1,0,0,0), c(0,0,0,-1,0,0), c(0,0,0,0,-1,0), c(0,0,0,0,1,0), c(0,0,0,0,0,-1), c(0,0,0,0,0,1))
#geracao de filhos inclusive com incompativeis
filhosDesc <- lapply(operadores, function(op) desc+op)
#remocao de estados incompativeis => quando alguma posicao de celula for <0 OU quando posicao X,Y for fora dos limites 2 X 2
incompativeis <- sapply(1:length(filhosInc),
function(i){
fDesc = filhosInc[[i]] #pega estado
retorno <- 0
#verifica se posicao celula negativa
for(k in 1:4){
if(fDesc[k]<0){
retorno <- i
}
}
#verifica limites de posicao em grid 2X2
if(fDesc[5]<1 || fDesc[5]>2 || fDesc[6]<1 || fDesc[6]>2){
retorno <- i
}
return(retorno)
}) #fim sapply
#Manter no vetor incompativeis apenas indices dos incompativeis => != 0
incompativeis <- incompativeis[incompativeis!=0]
#Colocar no vetor FilhosDesc apenas filhos compativeis
filhosDesc <- filhosDesc[-incompativeis]
print(filhosDesc)
}
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,2))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
v <- c(1,2,3,4)
sum(v[1:3])
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
v <- c(1,2,3)
v[1]
v[2]
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
debugSource("AspiradorDePo.R")
teste <- AspiradorDePo(desc = c(1,0,1,0,1,1))
geraFilhos(teste)
v <- c(1,1,1,1,1)
y <- c(1,1,1,?,?)
debugSource("AspiradorDePo.R")
debugSource("buscaDesinformada.R")
debugSource("buscaInformada.R")
inicial <- AspiradorDePo(desc = c(1,0,1,0,1,1)) #dois quadrados sujos com inicio em (1,1)
objetivo <- AspiradorDePo() #criacao de estado objetivo
objetivo$desc <- c(0,0,0,0,1,1)
cat("====\tBusca em Largura\t====\n")
print(unlist(buscaEmLargura(inicial, objetivo)))
debugSource("AspiradorDePo.R")
debugSource("buscaDesinformada.R")
debugSource("buscaInformada.R")
inicial <- AspiradorDePo(desc = c(1,0,1,0,1,1)) #dois quadrados sujos com inicio em (1,1)
objetivo <- AspiradorDePo() #criacao de estado objetivo
objetivo$desc <- c(0,0,0,0,1,1) #possilidade com objetivo em posicao (1,1)
cat("====\tBusca em Largura\t====\n")
print(unlist(buscaEmLargura(inicial, objetivo)))
debugSource("AspiradorDePo.R")
debugSource("buscaDesinformada.R")
debugSource("buscaInformada.R")
inicial <- AspiradorDePo(desc = c(1,0,1,0,1,1)) #dois quadrados sujos com inicio em (1,1)
objetivo <- AspiradorDePo() #criacao de estado objetivo
objetivo$desc <- c(0,0,0,0,1,1) #possilidade com objetivo em posicao (1,1)
cat("====\tBusca em Largura\t====\n")
print(unlist(buscaEmLargura(inicial, objetivo)))
debugSource("AspiradorDePo.R")
debugSource("buscaDesinformada.R")
debugSource("buscaInformada.R")
inicial <- AspiradorDePo(desc = c(1,0,1,0,1,1)) #dois quadrados sujos com inicio em (1,1)
objetivo <- AspiradorDePo() #criacao de estado objetivo
objetivo$desc <- c(0,0,0,0,1,1) #possilidade com objetivo em posicao (1,1)
cat("====\tBusca em Largura\t====\n")
print(unlist(buscaEmLargura(inicial, objetivo)))
cat("====\tBusca em Profundidade\t=====\n")
print(buscaEmProfundidade(inicial, objetivo))
cat("====\tBusca de Custo Uniforme\t=====\n")
print(buscaCustoUniforme(inicial, objetivo))
cat("====\tBusca Best-First (Gulosa)\t=====\n")
print(buscaBestFirst(inicial, objetivo, "Gulosa"))
cat("====\tBusca Best-First (A*)\t=====\n")
print(buscaBestFirst(inicial, objetivo, "AEstrela"))
debugSource("AspiradorDePo.R")
debugSource("buscaDesinformada.R")
debugSource("buscaInformada.R")
inicial <- AspiradorDePo(desc = c(1,0,1,0,1,1)) #dois quadrados sujos com inicio em (1,1)
objetivo <- AspiradorDePo() #criacao de estado objetivo
objetivo$desc <- c(0,0,0,0,1,1) #possilidade com objetivo em posicao (1,1)
cat("====\tBusca em Largura\t====\n")
print(unlist(buscaEmLargura(inicial, objetivo)))
debugSource("AspiradorDePo.R")
debugSource("buscaDesinformada.R")
debugSource("buscaInformada.R")
inicial <- AspiradorDePo(desc = c(1,0,1,0,1,1)) #dois quadrados sujos com inicio em (1,1)
objetivo <- AspiradorDePo() #criacao de estado objetivo
objetivo$desc <- c(0,0,0,0,1,1) #possilidade com objetivo em posicao (1,1)
cat("====\tBusca em Largura\t====\n")
print(unlist(buscaEmLargura(inicial, objetivo)))
debugSource("AspiradorDePo.R")
debugSource("buscaDesinformada.R")
debugSource("buscaInformada.R")
inicial <- AspiradorDePo(desc = c(1,0,1,0,1,1)) #dois quadrados sujos com inicio em (1,1)
objetivo <- AspiradorDePo() #criacao de estado objetivo
objetivo$desc <- c(0,0,0,0,1,1) #possilidade com objetivo em posicao (1,1)
cat("====\tBusca em Largura\t====\n")
print(unlist(buscaEmLargura(inicial, objetivo)))
cat("====\tBusca em Profundidade\t=====\n")
print(buscaEmProfundidade(inicial, objetivo))
